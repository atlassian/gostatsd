---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gostatsd-cfg
  namespace: default
data:
  config.toml: |
    # Example: don't actually do anything with the metrics
    backends=['stdout']
    default-tags=[]
    internal-tags=['in_cluster:true']
    statser-type='internal'
    flush-interval='1s'
    bad-lines-per-minute=1000
    metrics-addr=':8125'
    filters='no-hostname'

    [k8s]
    # Include any annotation beginning with myapp.company.com as a tag, using the part after the / as the tag name
    annotation-tag-regex = '^myapp\.company\.com/(?P<tag>.*)$'
    # Include the 'app' label as a tag
    label-tag-regex = '^app$'
    # Only watch pods that are on the node that this gostatsd is running on.
    watch-cluster = false
    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.
    node-name = ''

    [filter.no-hostname]
    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes
    drop-host=true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gostatsd
  namespace: default
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: gostatsd
  namespace: default
  labels:
    app: gostatsd
spec:
  selector:
    matchLabels:
      app: gostatsd
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: gostatsd
      annotations:
        myapp.company.com/imageVersion: "latest"
    spec:
      serviceAccountName: gostatsd
      # We need the host network so we have an explicitly addressable pod from every pod running on the node.
      # This will be the node's IP address
      hostNetwork: true
      containers:
      - name: gostatsd
        imagePullPolicy: IfNotPresent
        image: atlassianlabs/gostatsd:latest
        # Make sure nothing else on the node is listening on this port
        ports:
        - containerPort: 8125
        command: ['/bin/gostatsd', '--cloud-provider', 'k8s', '--config-path', '/etc/gostatsd-cfg/config.toml']
        env:
        # Set the `node-name` option under the k8s provider config sub options to the name of the node we're running on
        - name: GSD_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /etc/gostatsd-cfg
      volumes:
      - name: config
        configMap:
          name: gostatsd-cfg
---
# This is an example app that would consume the above node-local gostatsd DaemonSet
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gostatsd-consumer
  namespace: default
  labels:
    app: gostatsd-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gostatsd-consumer
  template:
    metadata:
      labels:
        app: gostatsd-consumer
      annotations:
        myapp.company.com/imageVersion: "latest"
    spec:
      containers:
        - name: metric-sender
          imagePullPolicy: IfNotPresent
          image: alpine:latest
          # Send a metric called `metric.namespace` which is a counter with a value of 1, tagged with some dummy tags,
          # to the local gostatsd DaemonSet. Do this once every 10 seconds.
          command: ['/bin/sh', '-c', 'while 1; echo "metric.namespace:1|c|#tag1:value1,tag2:value2" |  nc -w 1 -u $MY_NODE_IP 8125; sleep 10; done']
          env:
          - name: MY_NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
