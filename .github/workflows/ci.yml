name: ci

on:
  pull_request:
  push:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
      githash: ${{ steps.var_step.outputs.githash }}
      repoversion: ${{ steps.var_step.outputs.repoversion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get current branch
        id: check_step
        run: |
          if ${{ github.event_name == 'pull_request' }}
          then
            branch=${{ github.base_ref }}
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch=${raw##*/}
          fi
          echo "::set-output name=branch::$branch"
          echo "Branch is $branch."
      - name: Set variables
        id: var_step
        run: |
          hash=$(git rev-parse --short HEAD)
          echo "::set-output name=githash::$hash"
          echo "GitHash is $hash."
          repoversion=$(git describe --abbrev=0 --tags)
          echo "::set-output name=repoversion::$repoversion"
          echo "RepoVersion is $repoversion."

  build:
    needs: setup # Wait for check step to finish
    runs-on: ubuntu-18.04
    # minimal permissions for Get Artifact Publish Token
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17.2
      - name: Install Goveralls
        run: go get -v github.com/mattn/goveralls
      - name: Setup CI
        run: make setup-ci
      - name: Test
        run: |
          make check-fmt
          make build-all
          make check
          make test-race
          make bench-race
      - name: Non Tag
        if: github.ref_type != 'tag' || (needs.setup.outputs.branch != 'master' && needs.setup.outputs.branch != 'main' && needs.setup.outputs.branch != 'release')
        run: |
          echo "Will not proceed to release job. Build does not meet requirement for release:"
          echo "Ref type '$GITHUB_REF_TYPE' must equal tag and branch '${{ needs.setup.outputs.branch }}' must be master, main or release."

  release:
    needs:
      - setup
      - build
    if: (needs.setup.outputs.branch == 'master' || needs.setup.outputs.branch == 'main' || needs.setup.outputs.branch == 'release')
    runs-on: ubuntu-18.04
    strategy:
      matrix:
       arch: [amd64, arm64]
    # minimal permissions for Get Artifact Publish Token
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ matrix.arch }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Get Artifact Publish Token
        id: publish-token
        uses: atlassian-labs/artifact-publish-token@v1.0.4
        with:
          output-modes: environment
      - name: Docker Login
        run: |
          echo "Logging in to packages.atlassian.com"
          echo "${ARTIFACTORY_API_KEY}" | docker login docker-public.packages.atlassian.com -u "${ARTIFACTORY_USERNAME}" --password-stdin
      - name: Release
        run: |
          echo "Executing release on tag build $GITHUB_REF_NAME with ARCH ${{ matrix.arch }}"
          ARCH=linux CPU_ARCH=${{ matrix.arch }} GIT_HASH=${{ needs.setup.outputs.githash }} make release-image

  publish:
    needs:
      - setup
      - release
    if: (needs.setup.outputs.branch == 'master' || needs.setup.outputs.branch == 'main' || needs.setup.outputs.branch == 'release')
    runs-on: ubuntu-18.04
    steps:
      - name: Push Docker Manifest
        run: |
          echo "Executing release-manifest on tag build $GITHUB_REF_NAME"
          GIT_HASH=${{ needs.setup.outputs.githash }} REPO_VERSION=${{ needs.setup.outputs.repoversion }} make release
          GIT_HASH=${{ needs.setup.outputs.githash }} REPO_VERSION=${{ needs.setup.outputs.repoversion }} make release-manifest

